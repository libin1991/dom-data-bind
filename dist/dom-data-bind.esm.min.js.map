{"version":3,"sources":["webpack://__LIB/webpack/bootstrap","webpack://__LIB/external \"(window.Map.Map = window.Map)\"","webpack://__LIB/external \"(window.WeakMap.WeakMap = window.WeakMap)\"","webpack://__LIB/external \"(window.Set.Set = window.Set)\"","webpack://__LIB/./node_modules/@purtuga/common/src/jsutils/runtime-aliases.js","webpack://__LIB/./node_modules/@purtuga/common/src/jsutils/objectExtend.js","webpack://__LIB/./node_modules/@purtuga/common/src/jsutils/dataStore.js","webpack://__LIB/./node_modules/@purtuga/common/src/jsutils/queueCallback.js","webpack://__LIB/./node_modules/@purtuga/common/src/jsutils/Compose.js","webpack://__LIB/./src/utils.js","webpack://__LIB/./node_modules/@purtuga/common/src/domutils/isTemplateElement.js","webpack://__LIB/./node_modules/@purtuga/common/src/domutils/domFind.js","webpack://__LIB/./node_modules/@purtuga/common/src/jsutils/uuid.js","webpack://__LIB/./src/directives/NodeHandler.js","webpack://__LIB/./src/directives/Directive.js","webpack://__LIB/./node_modules/@purtuga/common/src/domutils/domInsertBefore.js","webpack://__LIB/./src/bindings/text-binding.js","webpack://__LIB/./src/Template.js","webpack://__LIB/./src/view.js","webpack://__LIB/./src/TemplateInstance.js","webpack://__LIB/./src/render.js","webpack://__LIB/./src/DomDataBind.js","webpack://__LIB/./src/directives/attr-directive.js","webpack://__LIB/./node_modules/@purtuga/common/src/domutils/domHasClass.js","webpack://__LIB/./node_modules/@purtuga/common/src/domutils/domAddClass.js","webpack://__LIB/./node_modules/@purtuga/common/src/domutils/domRemoveClass.js","webpack://__LIB/./src/directives/class-directive.js","webpack://__LIB/./src/directives/each-directive.js","webpack://__LIB/./src/directives/html-directive.js","webpack://__LIB/./src/directives/if-directive.js","webpack://__LIB/./node_modules/@purtuga/common/src/domutils/domAddEventListener.js","webpack://__LIB/./src/directives/on-directive.js","webpack://__LIB/./src/directives/prop-directive.js","webpack://__LIB/./src/directives/show-directive.js","webpack://__LIB/./node_modules/@purtuga/common/src/domutils/domSetStyle.js","webpack://__LIB/./src/directives/style-directive.js","webpack://__LIB/./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","window","Map","WeakMap","Set","functionBind","Function","functionBindCall","toString","isObject","obj","isString","objectKeys","defineProperties","keys","arr","isArray","Array","arrayForEach","forEach","arraySplice","indexOf","splice","arraySlice","slice","consoleLog","console","log","consoleError","error","HTMLElementPrototype","warn","iterator","HTMLElement","doc","document","createElement","head","tagName","createTextNode","data","hasAttribute","appendChild","insertBefore","getAttribute","setAttribute","removeAttribute","objectExtend","mergeIntoObj","mergeObjects","response","total","length","deepMerge","shift","dataStore","stash","callbacks","queue","queueCallback","cb","add","setTimeout","flushQueue","cbList","clear","PRIVATE","COMMON_DESTROY_METHOD_NAME","k","push","baseMethods","isDestroyed","init","destroy","executeCallbacksNow","has","this","destroyCallbacks","delete","callOnDestroyCallback","onDestroy","callback","inst","set","getInstanceState","getFactory","constructor","staticMethods","extend","args","Class","reduce","newProto","thisObjProto","objKey","isInstanceOf","instanceObj","some","protoKey","arguments","getDestroyCallback","instanceState","stateStore","prop","method","Node","undefined","Compose","ComposeConstructor","getNewConstructor","DOCUMENT","FUNCTION","ELEMENT_PROTOTYPE","Element","VALUE_GETTERS","counter","DOM_DATA_BIND_PROP","UUID","Date","now","Math","random","replace","bindCallTo","isPureObject","removeChild","createComment","isTemplate","ele","eleToStringValue","content","logError","createValueGetter","evalCode","trim","fn","getNodeAttrNames","node","attrNames","attributes","item","domFind","domEle","selector","querySelectorAll","pad","num","size","substr","globalCount","count","fingerprint","navigator","mimeTypes","userAgent","uuid","generate","timestamp","getTime","nextCounter","NodeHandler","directive","directives","_directives","_d","_directive","_n","_node","state","tracker","stopWatchingAll","super","render","update","Directive","[object Object]","handler","isQueued","handlerState","newValue","_tokenValueGetter","e","cleanNode","_attr","nodeType","getNodeHandler","NodeHandlerConstructor","domInsertBefore","newNode","referenceNode","parentNode","TextBinding","tokenText","_tokenText","nodeValue","nodeToRemove","DROPS_NODES_ON_CLONE","frag","createDocumentFragment","cloneNode","childNodes","NODE_CONTAINS_MISSES_TEXT_NODES","div","text","contains","nodeSplitText","Text","splitText","reHasDataToken","RegExp","reTokenMatch","getNodeValue","hasToken","test","Template","html","id","innerHTML","_bindings","getBindingFor","bindings","eleToBindings","ignoredChildren","directiveIterator","attrName","attrValue","managesNode","elePlaceholder","manages","getArrayForNodeFromMap","getDirectiveForAttribute","fakeEle","concat","addTextNodes","filter","onlyElementsWithAttributes","findAllNodes","skip","ignoredParent","values","compareDocumentPosition","child","lastIndex","childTokenMatches","exec","getTextBindingForToken","tokenTextNode","index","fixEmptyTextNode","tokenPlaceholder","processTextNode","directiveBindings","bindingEle","path","walkEle","parent","unshift","applyBindingsToTemplateInstance","Directives","directivesInstances","root","getNodeAt","Error","map","directiveInstances","directiveSignature","resultArr","hasChildNodes","firstChild","nextSibling","TEMPLATES","view","cacheKey","hasTemplate","TemplateInstance","docFrag","templateId","_frag","_childNodes","fromTemplateId","recover","nodeEle","setData","viewTemplate","importNode","DomDataBind","$ele","Factory","binding","AttrDirective","directiveAttr","attr","_matches","_htmlAttr","_isProp","domHasClass","el","cssClass","classList","domAddClass","classNameList","String","split","className","domRemoveClass","remove","DIRECTIVE","ClassDirective","newClasses","oldClasses","EACH","KEY_DIRECTIVE","destroyBinder","binder","_destroy","defaultRowKey","isEmptyList","list","EachDirective","iteratorArgs","listVar","matches","argName","parseDirectiveValue","_iteratorArgs","destroyChildBinders","binders","_isSoleChild","parentEle","_placeholderEle","textContent","getDataForIteration","dataObj","rowData","iterateOverList","newData","iterationDataList","isDataArray","currentBinders","binderToBeDestroyed","totalItems","usesKey","getKey","_viewTemplate","$root","$parent","$data","rowKey","_loop","bindersByKey","pos","positionRowInDom","recycleBinderKey","recycleBinder","entries","next","destroyRowElement","_handler","binderIndex","defaultInsertMarkerElement","each_directive_defineProperty","every","childNode","hasDedicatedParent","firstChildNode","setupViewTemplate","newList","listIterator","HtmlDirective","IfDirective","if_directive_defineProperty","showElement","_renderedEle","_renderTemplate","destroy_renderedEle","domAddEventListener","event","capture","events","evListeners","evName","addEventListener","removeEventListener","listeners","matchesDirective","str","escapeString","OnDirective","_eventName","handleEvent","domEv","tokenValue","$ev","evListener","matchRegExp","PropDirective","ShowDirective","_origDisplayStyle","style","display","eleStyleList","domSetStyle","styles","StyleDirective","__webpack_exports__","DomDataBindAll","attr_directive_AttrDirective","class_directive_ClassDirective","each_directive_EachDirective","html_directive_HtmlDirective","if_directive_IfDirective","on_directive_OnDirective","prop_directive_PropDirective","show_directive_ShowDirective","style_directive_StyleDirective","src_DomDataBind","src_render","directives_namespaceObject","directives_Directive","allDirectives"],"mappings":"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","file":"dom-data-bind.esm.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = (window.Map.Map = window.Map);","module.exports = (window.WeakMap.WeakMap = window.WeakMap);","module.exports = (window.Set.Set = window.Set);","/**\r\n * return a value to a given method\r\n *\r\n * @function\r\n * @param {Function} fn\r\n * @param {*} ctx The context to be assigned to `fn`\r\n * @return {Function}\r\n *\r\n * @example\r\n *\r\n * f = functionBin(function() { console.log(`Hello ${this.name}`); }, { name: \"Jackson\" });\r\n * f(); // => \"Hello Jackson\"\r\n */\r\nexport const functionBind = Function.bind.call.bind(Function.bind);\r\n\r\n/**\r\n * return a bound `.call` to the given method.\r\n *\r\n * @type function\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @example\r\n *\r\n * forEach = functionBindCall(Array.prototype.forEach);\r\n * // same as doing: Array.prototype.forEach.call (but returns a new \"call\" method);\r\n */\r\nexport const functionBindCall = functionBind(Function.call.bind, Function.call);\r\n\r\n// Object ===============================================================================\r\nexport const toString                 = functionBindCall(Object.prototype.toString);\r\nexport const isObject                 = obj => toString(obj) === \"[object Object]\";\r\nexport const isString                 = obj => toString(obj) === \"[object String]\";\r\nexport const isFunction               = obj => toString(obj) === \"[object Function]\";\r\nexport const objectDefineProperty     = Object.defineProperty;\r\nexport const objectDefineProperties   = Object.defineProperties;\r\nexport const objectKeys               = Object.keys;\r\nexport const defineProperty = (obj, prop, value, getter, setter, configurable = true, enumerable = false, writable = true) => {\r\n    const descriptor = {\r\n        configurable,\r\n        enumerable\r\n    };\r\n\r\n    if (getter || setter) {\r\n        descriptor.get = getter;\r\n        descriptor.set = setter;\r\n    } else {\r\n        descriptor.writable = writable;\r\n        descriptor.value = value;\r\n    }\r\n\r\n    objectDefineProperty(obj, prop, descriptor);\r\n\r\n    return obj;\r\n};\r\n\r\n\r\n// Array ===============================================================================\r\nconst arr = [];\r\nexport const isArray        = Array.isArray;\r\nexport const arrayForEach   = functionBindCall(arr.forEach);\r\nexport const arrayIndexOf   = functionBindCall(arr.indexOf);\r\nexport const arraySplice    = functionBindCall(arr.splice);\r\nexport const arraySlice    = functionBindCall(arr.slice);\r\n\r\n\r\n// Logging ===============================================================================\r\nexport const consoleLog = console.log; // eslint-disable-line\r\nexport const consoleError = console.error || consoleLog; // eslint-disable-line\r\nexport const consoleWarn = console.warn || consoleLog; // eslint-disable-line\r\n\r\n\r\n// Iterators ===============================================================================\r\nexport const SymbolIterator = \"undefined\" !== typeof Symbol && Symbol.iterator ? Symbol.iterator : \"@@iterator\";\r\n\r\n\r\n// DOM ===============================================================================\r\nconst HTMLElementPrototype = HTMLElement.prototype;\r\nexport const doc = document;\r\nexport const head = doc.head;\r\nexport const createDocFragment = () => doc.createDocumentFragment();\r\nexport const createElement = tagName => doc.createElement(tagName);\r\nexport const createTextNode = data => doc.createTextNode(data || \"\");\r\nexport const appendChild = functionBindCall(HTMLElementPrototype.appendChild);\r\nexport const insertBefore = functionBindCall(HTMLElementPrototype.insertBefore);\r\nexport const hasAttribute = functionBindCall(HTMLElementPrototype.hasAttribute);\r\nexport const getAttribute = functionBindCall(HTMLElementPrototype.getAttribute);\r\nexport const setAttribute = functionBindCall(HTMLElementPrototype.setAttribute);\r\nexport const removeAttribute = functionBindCall(HTMLElementPrototype.removeAttribute);","import {isObject} from \"./runtime-aliases.js\";\r\n\r\n//============================================================\r\n\r\n/**\r\n * Extends an object with the properties of another.\r\n *\r\n * @param {Object|Boolean} mergeIntoObj\r\n *  The object that will have the properties of every other object provided\r\n *  on input merged into. This can also be a `Boolean`, in which case,\r\n *  a deep merge of objects will be done - argument number 2 will\r\n *  become the `mergeIntoObj`.\r\n * @param {...Object} mergeObjects\r\n *\r\n * @return {Object}\r\n */\r\nexport function objectExtend(mergeIntoObj, ...mergeObjects) {\r\n    let response    = mergeIntoObj || {};\r\n    let total       = mergeObjects.length;\r\n    let deepMerge   = false;\r\n    let i;\r\n    let key;\r\n\r\n    if (typeof mergeIntoObj === \"boolean\") {\r\n        deepMerge   = mergeIntoObj;\r\n        response    = mergeObjects.shift() || {};\r\n        total       = mergeObjects.length;\r\n    }\r\n\r\n    for (i = 0; i < total; i++) {\r\n        if (!mergeObjects[i]) {\r\n            continue;\r\n        }\r\n\r\n        for (key in mergeObjects[i]) {\r\n            if (mergeObjects[i].hasOwnProperty(key)) {\r\n                if (\r\n                    deepMerge &&\r\n                    isObject(response[key]) &&\r\n                    isObject(mergeObjects[i][key])\r\n                ) {\r\n                    response[key] = objectExtend( true, response[key], mergeObjects[i][key]);\r\n\r\n                } else {\r\n                    response[key] = mergeObjects[i][key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return response;\r\n}\r\nexport default objectExtend;","import {WeakMap} from \"./WeakMap\";\r\n\r\n/**\r\n * Returns an object that contains an initialized WeakMap (`stash` property)\r\n * where data can be stored.\r\n *\r\n * @namespace dataStore\r\n *\r\n */\r\nvar dataStore = /** @lends dataStore */{\r\n    /**\r\n     * Stash data here.\r\n     * @type WeakMap\r\n     */\r\n    stash:  new WeakMap(),\r\n    /**\r\n     * Create a private data store and return it.\r\n     * @return {WeakMap}\r\n     */\r\n    create: function(){\r\n        return new WeakMap();\r\n    }\r\n};\r\n\r\nexport default dataStore;\r\nexport { dataStore };\r\n","import Set from \"./es6-Set\"\r\n\r\n//===============================================\r\nconst callbacks = new Set();\r\nlet queue;\r\n\r\n/**\r\n * Queue a callback to be executed after at the start of next event loop.\r\n * This differs from `nextTick` in that callbacks are not executed during\r\n * micro-processing, but rather on next event loop, so this is not ideal\r\n * for logic that can cause UI reflow.\r\n *\r\n * @param {Function} cb\r\n */\r\nexport function queueCallback(cb) {\r\n    if (\"function\" === typeof cb) {\r\n        callbacks.add(cb);\r\n\r\n        if (!queue) {\r\n            queue = setTimeout(flushQueue, 0);\r\n        }\r\n    }\r\n}\r\nexport default queueCallback;\r\n\r\nfunction flushQueue() {\r\n    const cbList  = [...callbacks];\r\n    callbacks.clear();\r\n    queue = null;\r\n    let cb;\r\n    while ((cb = cbList.shift())) {\r\n        cb();\r\n        cb = null;\r\n    }\r\n}\r\n","import objectExtend from \"./objectExtend\"\r\nimport dataStore from \"./dataStore\"\r\nimport queueCallback from \"./queueCallback\"\r\n\r\n//=========================================================\r\nconst PRIVATE = dataStore.create();\r\nconst COMMON_DESTROY_METHOD_NAME = [\r\n    \"destroy\",      // Compose\r\n    \"remove\",       // DOM Events Listeners\r\n    \"off\"           // EventEmitter Listeners\r\n];\r\n\r\n// return all KEYs of an object, even those that are not iterable\r\nfunction objectKeys(prototype){\r\n    let k, keys = [];\r\n    for (k in prototype){\r\n        keys.push(k);\r\n    }\r\n    return keys;\r\n}\r\n\r\n// Base instance methods for Compose'd object\r\nconst baseMethods = /** @lends Compose.prototype */{\r\n\r\n    /**\r\n     * Property indicating whether instance has been destroyed\r\n     */\r\n    isDestroyed: false,\r\n\r\n    /**\r\n     * instance initializing code\r\n     */\r\n    init(){},\r\n\r\n    /**\r\n     * Destroys the instance, by removing its private data.\r\n     * Any attached `onDestroy` callback will be executed `async` - queued and\r\n     * called on next event loop\r\n     *\r\n     * @param {Boolean} [executeCallbacksNow=false]\r\n     */\r\n    destroy(executeCallbacksNow){\r\n        if (PRIVATE.has(this)) {\r\n            let destroyCallbacks = PRIVATE.get(this);\r\n            PRIVATE.delete(this);\r\n\r\n            if (executeCallbacksNow) {\r\n                destroyCallbacks.forEach(callOnDestroyCallback);\r\n            }\r\n            else {\r\n                queueCallback(() => destroyCallbacks.forEach(callOnDestroyCallback));\r\n            }\r\n        }\r\n\r\n        if (\"boolean\" === typeof this.isDestroyed) {\r\n            this.isDestroyed = true;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds a callback to the queue to be called when this object's `.destroy()`\r\n     * is called.\r\n     *\r\n     * @param {Function} callback\r\n     */\r\n    onDestroy(callback){\r\n        getInstanceState(this).push(callback);\r\n    },\r\n\r\n    /**\r\n     * Returns the factory for this instance.\r\n     *\r\n     * @return {Compose}\r\n     */\r\n    getFactory(){\r\n        if (this.constructor) {\r\n            return this.constructor;\r\n        }\r\n    }\r\n};\r\n\r\n\r\nconst staticMethods = /** @lends Compose */{\r\n    /**\r\n     * Creates an new factory based on the prototye of the current Factory\r\n     * and any other Factory given on input.\r\n     *\r\n     * @return {Compose}\r\n     */\r\n    extend: function(...args){\r\n        let Class = class extends this {};\r\n\r\n        objectExtend(Class.prototype, args.reduce(function(newProto, obj){\r\n            if (obj) {\r\n                const thisObjProto = (obj.prototype || obj);\r\n                objectKeys(thisObjProto).forEach(function(objKey){\r\n                    newProto[objKey] = thisObjProto[objKey];\r\n                });\r\n            }\r\n            return newProto;\r\n        }, {}));\r\n\r\n        return Class;\r\n    },\r\n\r\n    /**\r\n     * Checks if the Object given on input looks like an instance of this Factory.\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    isInstanceOf: function(instanceObj){\r\n\r\n        if (!instanceObj) {\r\n            return false;\r\n        }\r\n\r\n        var neededKeys = objectKeys(this.prototype);\r\n\r\n        // If any prototype key is not in the object prototype, then return false\r\n        return !neededKeys.some(function(protoKey){\r\n            return typeof instanceObj[protoKey] === \"undefined\";\r\n        });\r\n\r\n    },\r\n\r\n    /**\r\n     * Creates an instance object based on this factory.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    create: function(){\r\n        return new this(...arguments);\r\n    },\r\n\r\n    /**\r\n     * Returns a standard callback that can be used to remove cleanup instance state\r\n     * from specific Store (WeakMap). Returned function will destroy known Instances\r\n     * that have destroy methods.\r\n     *\r\n     * @param {Object} instanceState\r\n     * @param {WeakMap} [stateStore]\r\n     *\r\n     * @return {Function}\r\n     *\r\n     * @example\r\n     *\r\n     * const MY_PRIVATE = new WeakMap();\r\n     * cont NewWdg = Componse.extend({\r\n     *      init() {\r\n     *          const state = {};\r\n     *          MY_PRIVATE.set(this, state);\r\n     *          ...\r\n     *\r\n     *          this.onDestroy(Compose.getDestroyCallback(state, MY_PRIVATE));\r\n     *      }\r\n     * });\r\n     */\r\n    getDestroyCallback: getDestroyCallback\r\n};\r\n\r\n\r\n/**\r\n * Returns a standard callback that can be used to remove cleanup instance state\r\n * from specific Store (WeakMap). Returned function will destroy known Instances\r\n * that have destroy methods.\r\n *\r\n * @method Compose~getDestroyCallback\r\n *\r\n * @param {Object} instanceState\r\n * @param {WeakMap} [stateStore]\r\n *\r\n * @return {Function}\r\n *\r\n * @example\r\n *\r\n * const MY_PRIVATE = new WeakMap();\r\n * cont NewWdg = Componse.extend({\r\n *      init() {\r\n *          const state = {};\r\n *          MY_PRIVATE.set(this, state);\r\n *          ...\r\n *\r\n *          this.onDestroy(Compose.getDestroyCallback(state, MY_PRIVATE));\r\n *      }\r\n * });\r\n */\r\nexport function getDestroyCallback (instanceState, stateStore) {\r\n    return () => {\r\n        if (instanceState) {\r\n            // Destroy all Compose object\r\n            Object.keys(instanceState).forEach(function (prop) {\r\n                if (instanceState[prop]) {\r\n                    COMMON_DESTROY_METHOD_NAME.some((method) => {\r\n                        if (\r\n                            instanceState[prop][method] &&\r\n                            (method !== \"remove\" || !(instanceState[prop] instanceof Node)) // Caution: should not remove DOM elements.\r\n                        ) {\r\n                            instanceState[prop][method]();\r\n                            return true;\r\n                        }\r\n                    });\r\n\r\n                    instanceState[prop] = undefined;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (stateStore && stateStore.has && stateStore.has(instanceState)) {\r\n            stateStore.delete(instanceState);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getInstanceState(inst) {\r\n    if (!PRIVATE.has(inst)) {\r\n        PRIVATE.set(inst, []);\r\n    }\r\n\r\n    return PRIVATE.get(inst);\r\n}\r\n\r\nfunction callOnDestroyCallback (callback){\r\n    if (\"function\" === typeof callback) {\r\n        callback();\r\n    }\r\n}\r\n\r\nfunction getNewConstructor () {\r\n    function ComposeConstructor(...args) {\r\n        // Called with `new`?\r\n        if (this && this.constructor && this instanceof this.constructor) {\r\n            return this.init(...args);\r\n        }\r\n\r\n        // called directly\r\n        return new ComposeConstructor(...args);\r\n    }\r\n\r\n    ComposeConstructor.prototype.constructor = ComposeConstructor;\r\n    return ComposeConstructor;\r\n}\r\n\r\n/**\r\n * Composes new factory methods from a list of given Objects/Classes.\r\n *\r\n * @class Compose\r\n * @borrows Compose~getDestroyCallback as Compose.getDestroyCallback\r\n *\r\n * @example\r\n *\r\n * var Widget = Compose.create(Model, Events);\r\n *\r\n * myWidget = Widget.create();\r\n *\r\n */\r\nconst Compose = getNewConstructor();\r\nobjectExtend(Compose.prototype, baseMethods);\r\nobjectExtend(Compose, staticMethods);\r\n\r\nexport default Compose;\r\nexport { Compose };\r\n","import dataStore    from \"@purtuga/common/src/jsutils/dataStore\"\r\nimport Map          from \"@purtuga/common/src/jsutils/es6-Map\"\r\nimport {\r\n    functionBindCall,\r\n    isObject,\r\n    isString,\r\n    arrayForEach,\r\n    arraySlice,\r\n    hasAttribute,\r\n    setAttribute,\r\n    getAttribute,\r\n    removeAttribute,\r\n    insertBefore,\r\n    createElement,\r\n    createTextNode,\r\n    createDocFragment,\r\n    consoleError,\r\n    functionBind\r\n} from \"@purtuga/common/src/jsutils/runtime-aliases.js\"\r\nimport {isTemplateElement} from \"@purtuga/common/src/domutils/isTemplateElement.js\"\r\n//=====================================================\r\nconst DOCUMENT              = document;\r\nconst FUNCTION              = Function;\r\nconst ELEMENT_PROTOTYPE     = Element.prototype;\r\nconst VALUE_GETTERS         = new Map();\r\nlet counter = 1;\r\n\r\nexport {\r\n    arrayForEach,\r\n    arraySlice,\r\n    hasAttribute,\r\n    setAttribute,\r\n    getAttribute,\r\n    removeAttribute,\r\n    insertBefore,\r\n    createElement,\r\n    createTextNode,\r\n    createDocFragment,\r\n    isString\r\n};\r\n\r\nexport const DOM_DATA_BIND_PROP = \"DomDataBind\";\r\nexport const PRIVATE            = dataStore.create();\r\nexport const UUID               = `D-${ Date.now() }-${ Math.random().toString(36).replace(/[^a-z0-9]+/g, '') }`;\r\nexport const escapeString       = str => String(str).replace(/[-[\\]/{}()*+?.\\\\^$|]/g, \"\\\\$&\");\r\nexport const bindCallTo         = functionBindCall;\r\nexport const isPureObject       = isObject;\r\nexport const removeChild        = functionBindCall(ELEMENT_PROTOTYPE.removeChild);\r\nexport const createComment      = functionBind(DOCUMENT.createComment, DOCUMENT);\r\nexport const isTemplate         = isTemplateElement;\r\nexport const logError           = consoleError;\r\n\r\n\r\n/**\r\n * Create a Function to be used in retrieving a given value from a data structure\r\n * @param evalCode\r\n * @param name\r\n * @returns {*}\r\n */\r\nexport function createValueGetter(evalCode, name = \"runtime\") {\r\n    evalCode = evalCode.trim();\r\n\r\n    if (VALUE_GETTERS.has(evalCode)) {\r\n        return VALUE_GETTERS.get(evalCode);\r\n    }\r\n\r\n    const fn = new FUNCTION(\"$DATA\", `\r\nwith ($DATA) {\r\n    if ($DATA.$data) {\r\n        with ($DATA.$data) {\r\n            return (${ evalCode });\r\n        }\r\n    } \r\n    return (${ evalCode });\r\n}\r\n//# sourceURL=valueGetter:${name}.${counter++}.js`);\r\n\r\n    VALUE_GETTERS.set(evalCode, fn);\r\n    return fn;\r\n}\r\n\r\n/**\r\n * Returns an array of attributes names found on a given HTML node\r\n *\r\n * @param {HTMLElement} node\r\n * @returns {Array}\r\n */\r\nexport function getNodeAttrNames(node){\r\n    const attrNames = [];\r\n    const total = node.attributes.length;\r\n\r\n    for(let i = 0; i < total; i++) {\r\n        attrNames.push(node.attributes.item(i).name);\r\n    }\r\n\r\n    return attrNames;\r\n}","import {toString} from \"../jsutils/runtime-aliases.js\";\r\n\r\n/**\r\n * Returns a boolean indicating if provided element on input is a HTML Template element (like).\r\n *\r\n * @param {HTMLElement} ele\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isTemplateElement(ele) {\r\n    const eleToStringValue = toString(ele);\r\n    return eleToStringValue === \"[object HTMLTemplateElement]\" ||\r\n        (eleToStringValue === \"[object HTMLUnknownElement]\" && !!ele.content);\r\n}","/**\r\n * Finds Elements within a given HTML Element using `querySelectorAll` and\r\n * return an Array with those elements.\r\n *\r\n * @function domFind\r\n *\r\n * @param {HTMLElement} domEle\r\n * @param {String} selector\r\n *\r\n * @returns {Array<HTMLElement>}\r\n */\r\nexport function domFind(domEle, selector){\r\n    return Array.prototype.slice.call(domEle.querySelectorAll(selector));\r\n}\r\nexport default domFind;\r\n","// Some of the code below was taken from from https://github.com/ericelliott/cuid/\r\n\r\n/**\r\n * Generates a unique id. This is really a CUID.\r\n *\r\n * @namespace uuid\r\n */\r\nvar\r\n    base    = 36,\r\n    counter = 1,\r\n    letter  = \"c\",\r\n    pad     = function(num, size) {\r\n        var s = \"000000000\" + num;\r\n        return s.substr(s.length-size);\r\n    },\r\n\r\n    globalCount = (function() {\r\n        var i, count = 0; // eslint-disable-line\r\n        for (i in window) {\r\n            count++;\r\n        }\r\n        return count;\r\n    }()),\r\n\r\n    fingerprint = (function() {\r\n        return pad(\r\n            (navigator.mimeTypes.length + navigator.userAgent.length).toString(36) + globalCount.toString(36),\r\n            4\r\n        );\r\n    }());\r\n\r\n\r\nvar uuid = Object.create(/** @lends uuid */{\r\n    generate: function(){\r\n        var\r\n            timestamp   = (new Date().getTime()).toString(base),\r\n            nextCounter = pad((counter++).toString(base), 4),\r\n            random      = 'xxxxxxxx'.replace(/[x]/g, function() {\r\n            // This code from: http://stackoverflow.com/a/2117523/471188\r\n                var v = Math.random()*16|0;\r\n                return v.toString(16);\r\n            });\r\n\r\n        return (letter + timestamp + nextCounter + fingerprint + random);\r\n\r\n    }\r\n});\r\n\r\nexport default uuid;\r\nexport { uuid };\r\n","import Compose from \"@purtuga/common/src/jsutils/Compose.js\";\r\nimport {PRIVATE} from \"../utils.js\";\r\n\r\n/**\r\n * A Directive Node handler\r\n *\r\n * @extends Compose\r\n *\r\n * @param {Directive} directive Directive instance\r\n * @param {Node} node\r\n */\r\nexport class NodeHandler extends Compose {\r\n    init(directive, node, directives) {\r\n        this._directives = directives;\r\n        this._d = this._directive = directive;\r\n        this._n = this._node = node;\r\n    }\r\n\r\n    /**\r\n     * List of directives that were used during parsing of the template\r\n     * @name NodeHandler#_directives\r\n     * @type Array<Directive>\r\n     */\r\n\r\n    /**\r\n     * The Directive instance that is tied to this node handler\r\n     * @name NodeHandler#_directive\r\n     * @type Directive\r\n     * @protected\r\n     */\r\n\r\n    /**\r\n     * The Node associated with this node handler\r\n     * @name NodeHandler#_node\r\n     * @type Node\r\n     * @protected\r\n     */\r\n\r\n    // Override destroy (which is by default \"async\" and ensure that notifications\r\n    // are turned off immediately for this Node\r\n    destroy() {\r\n        const state = PRIVATE.get(this);\r\n        if (state){\r\n            if (state.tracker && state.tracker.stopWatchingAll) {\r\n                state.tracker.stopWatchingAll();\r\n            }\r\n            if (state.data) {\r\n                state.data = null;\r\n            }\r\n        }\r\n        super.destroy();\r\n        PRIVATE.delete(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the data given on input to the Template.\r\n     * (By default, it proxies to the Directive#render())\r\n     *\r\n     * @param data\r\n     */\r\n    render(data) {\r\n        this._d.render(this, this._n, data);\r\n    }\r\n\r\n    /**\r\n     * Shoudl be overwritten to contain the logic as to how a new value (generated by the Directive's `render()`)\r\n     * should be applied to the live HTML. Should be overwritten.\r\n     *\r\n     * @param {*} newValue\r\n     */\r\n    update(/*newValue*/) {}// eslint-disable-line\r\n}\r\n","import Compose from \"@purtuga/common/src/jsutils/Compose\"\r\nimport {logError, PRIVATE, removeAttribute} from \"../utils\"\r\nimport {NodeHandler} from \"./NodeHandler.js\";\r\n\r\n//===================================================================================\r\n\r\n/**\r\n * A DOM element directive.\r\n * NOte that any directive that removes the original DOM element from its parent\r\n * will prevent all subsequent directives from running.\r\n *\r\n * @class Directive\r\n * @extends Compose\r\n *\r\n * @param {String} directiveAttr\r\n *  The directive html element attribute as found in the element.\r\n * @param {String} attrValue\r\n *  The value of the attribute\r\n */\r\nexport class Directive extends Compose {\r\n    /**\r\n     * Checks a given element has an element attribute that matches the Directive.\r\n     * If a match is found, the html Element's attribute that was matched must be\r\n     * returned.\r\n     *\r\n     * @param {HTMLElement} ele\r\n     *\r\n     * @returns {String}\r\n     */\r\n    static has(/*ele*/) { return \"\"; }\r\n\r\n    /**\r\n     * A boolean indicating whether this directive manages the element. If set to true, then\r\n     * `DomDataBind` will not process any other directives after this one.\r\n     */\r\n    static manages() { return false; }\r\n\r\n    /**\r\n     * The Class that will be used to initialize a new node handler for the directive\r\n     *\r\n     * @type NodeHandler\r\n     * @constructor\r\n     */\r\n    static NodeHandlerConstructor = NodeHandler;\r\n\r\n    /**\r\n     * Render the Directive with given data\r\n     *\r\n     * @param {NodeHandler} handler\r\n     * @param {Node} node\r\n     * @param {Object} data\r\n     */\r\n    render(handler, node, data) {\r\n        let state = PRIVATE.get(handler);\r\n\r\n        if (!state) {\r\n            /**\r\n             * Directive Node Handler state\r\n             *\r\n             * @typedef {Object} NodeHandlerState\r\n             *\r\n             * @property {*} data\r\n             * @property {*} value\r\n             * @property {Boolean} isQueued\r\n             * @property {Function} tracker\r\n             * @property {Function} update\r\n             */\r\n            state = {\r\n                data:       null,\r\n                value:      \"\",\r\n                isQueued:   false,\r\n                tracker:    () => this.render(handler, node, state.data)\r\n                //update: () => {} --- should be defined by Directive subclass\r\n            };\r\n            PRIVATE.set(handler, state);\r\n\r\n        }\r\n\r\n        if (state.data !== data) {\r\n            // With use of observables, the tracker function get a `stopWatchingAll()` method\r\n            // which removes this tracker from all property dependency lists.\r\n            if (state.tracker.stopWatchingAll) {\r\n                state.tracker.stopWatchingAll();\r\n            }\r\n            state.data = data;\r\n        }\r\n\r\n        this.update(handler);\r\n    }\r\n\r\n    /**\r\n     * Updates a node by generating a new value for the Directive, storing it\r\n     * in the handler `state.value` and calling `handle.update` after it.\r\n     *\r\n     * @param {NodeHandler} handler\r\n     */\r\n    update(handler) {\r\n        // destruction happens 1ms after .destroy() (Componse#destroy()) is called,\r\n        // so its possible that a handler might come in here having its `.isDestroyed`\r\n        // flag set.\r\n        if (handler.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        const handlerState = PRIVATE.get(handler);\r\n\r\n        if (handlerState) {\r\n            let newValue = \"\";\r\n\r\n            try {\r\n                newValue = this._tokenValueGetter(handlerState.data || {});\r\n\r\n                // Update node\r\n                if (handler.update) {\r\n                    handler.update(newValue);\r\n                }\r\n            }\r\n            catch(e) {\r\n                logError(e);\r\n            }\r\n\r\n            if (handlerState.value !== newValue) {\r\n                handlerState.value = newValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cleans the node by removing Directive specific attribute. By default, the `_attr`\r\n     * that was given to this constructor will be removed from the node.\r\n     *\r\n     * @param {Node} node\r\n     */\r\n    cleanNode(node) {\r\n        if (this._attr && node.nodeType !== 8 /* don't process comment nodes */) {\r\n            removeAttribute(node, this._attr);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a node handler for this Directive on the provided Node\r\n     *\r\n     * @param {Node} node\r\n     * @param {Array<Directive>} [directives]\r\n     *\r\n     * @return {NodeHandler}\r\n     */\r\n    getNodeHandler(node, directives) {\r\n        this.cleanNode(node);\r\n        return new this.constructor.NodeHandlerConstructor(this, node, directives);\r\n    }\r\n}\r\nexport default Directive;\r\n\r\n","/**\r\n * Shortcut/Functional alias to `Node.insertBefore` method.\r\n *\r\n * @param {Node|DocumentFragment} newNode\r\n * @param {Node} referenceNode\r\n *\r\n * @returns {Node|DocumentFragment}\r\n */\r\nexport function domInsertBefore(newNode, referenceNode) {\r\n    if (referenceNode && referenceNode.parentNode && referenceNode.parentNode.insertBefore) {\r\n        referenceNode.parentNode.insertBefore(newNode, referenceNode);\r\n    }\r\n    return newNode;\r\n}\r\nexport default domInsertBefore;\r\n\r\n","import Directive from \"../directives/Directive\"\r\nimport {\r\n    UUID,\r\n    createTextNode,\r\n    createValueGetter   } from \"../utils\"\r\nimport {domInsertBefore} from \"@purtuga/common/src/domutils/domInsertBefore.js\"\r\nimport {NodeHandler} from \"../directives/NodeHandler.js\";\r\n\r\n//===========================================================\r\n\r\nexport class TextBinding extends Directive {\r\n    static NodeHandlerConstructor = class extends NodeHandler {\r\n        update(newValue) {\r\n            if (newValue !== this._node.nodeValue) {\r\n                this._node.nodeValue = newValue;\r\n            }\r\n        }\r\n    };\r\n\r\n    init(tokenText) {\r\n        this._tokenText = tokenText;\r\n        this._tokenValueGetter = createValueGetter(tokenText, \"text\");\r\n    }\r\n\r\n    getNodeHandler(node) {\r\n        // Text nodes are processed in a special way in `DomDataBind.getTemplateForDomElement`, where\r\n        // free-floating textnode are replaced with HTML comments in order to not lose their place when\r\n        // converted to text and then back to dom elements. We replace those here now..\r\n        if (node.nodeType === 8 && node.nodeValue === UUID) {\r\n            const nodeToRemove = node;\r\n            node = domInsertBefore(createTextNode(\"\"), nodeToRemove);\r\n            nodeToRemove.parentNode.removeChild(nodeToRemove);\r\n        }\r\n\r\n        return super.getNodeHandler(node);\r\n    }\r\n}\r\n\r\nexport default TextBinding;\r\n\r\n","import domFind from \"@purtuga/common/src/domutils/domFind.js\"\r\nimport {uuid} from \"@purtuga/common/src/jsutils/uuid.js\"\r\nimport {\r\n    PRIVATE,\r\n    UUID,\r\n    bindCallTo,\r\n    removeAttribute,\r\n    getAttribute,\r\n    arrayForEach,\r\n    createComment,\r\n    createDocFragment,\r\n    createTextNode,\r\n    logError,\r\n    createElement,\r\n    isTemplate\r\n} from \"./utils\"\r\nimport TextBinding from \"./bindings/text-binding.js\"\r\n\r\n\r\n//=========================================================================================\r\nconst DATA_TOKEN_REG_EXP_STR    = \"{{(.*?)}}\";\r\nconst DROPS_NODES_ON_CLONE = (() => {   // FUCK YOU IE!\r\n    const frag = createDocFragment();\r\n    frag.appendChild(createTextNode(\"test\"));\r\n    frag.appendChild(createTextNode(\"\"));\r\n    return frag.cloneNode(true).childNodes.length === 1;\r\n})();\r\nconst NODE_CONTAINS_MISSES_TEXT_NODES = (() => {    // FUCK YOU IE!\r\n    const div = createElement(\"div\");\r\n    const text = createTextNode(\"test\");\r\n    div.appendChild(text);\r\n    return !div.contains(text);\r\n})();\r\n\r\n\r\n// Local aliases\r\nconst nodeSplitText         = bindCallTo(Text.prototype.splitText);\r\n\r\n// short helpers\r\nconst reHasDataToken        = new RegExp(DATA_TOKEN_REG_EXP_STR);\r\nconst reTokenMatch          = new RegExp(DATA_TOKEN_REG_EXP_STR, \"g\");\r\nconst getNodeValue          = node => node ? node.nodeValue : \"\";\r\nconst hasToken              = node => reHasDataToken.test(getNodeValue(node));\r\n\r\n// FIXME: use insertBefore() alias in several places below\r\n\r\n\r\n/**\r\n * A Dom template along with its set of know directives (after parsing it)\r\n */\r\nexport class Template {\r\n    constructor(html, directives = []) {\r\n        this.id = uuid.generate();\r\n\r\n        if (!isTemplate(html)) {\r\n            this.ele = createElement(\"template\");\r\n            this.ele.innerHTML = html;\r\n        } else {\r\n            this.ele = html;\r\n        }\r\n\r\n        this._directives = directives;\r\n\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            // DEV MODE:: warn about directive positioning\r\n            if (directives.length) {\r\n                const directivesPosition = directives.reduce(function(positions, Directive, index){\r\n                    positions[Directive.name] = index;\r\n                    positions[`has${Directive.name}`] = true;\r\n                    return positions;\r\n                }, {});\r\n\r\n                if (directivesPosition.hasEachDirective && directivesPosition.EachDirective !== 0) {\r\n                    console.warn(`DomDataBind: 'EachDirective' position in 'directives' array should be 0!`); // eslint-disable-line\r\n                }\r\n\r\n                if (!directivesPosition.hasEachDirective && directivesPosition.hasIfDirective) {\r\n                    if (directivesPosition.hasEachDirective && directivesPosition.IfDirective !== 1) {\r\n                        console.warn(`DomDataBind: 'IfDirective' position in 'directives' array should be 1 (right after 'EachDirective')!`); // eslint-disable-line\r\n                    } else if (directivesPosition.IfDirective !== 0) {\r\n                        console.warn(`DomDataBind: 'IfDirective' position in 'directives' array should be 0!`); // eslint-disable-line\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._bindings = getBindingFor(this.ele.content, directives);\r\n    }\r\n\r\n    /**\r\n     * The template unique id\r\n     * @name Template#id\r\n     * @type {String}\r\n     */\r\n\r\n    /**\r\n     * The HTMLTemplateElement\r\n     * @name Template#ele\r\n     * @type {HTMLTemplateElement}\r\n     */\r\n}\r\nexport default Template;\r\n\r\n/**\r\n * Returns a Map() that includes the paths to nodes in the Dom template that\r\n * are using Directives or have bindings.\r\n * The map \"key\" is an array of `childNodes` paths from the root of the template\r\n * all the way to the node.\r\n * The map \"value\" is an array Directive instances for that node\r\n *\r\n * @return {Map}\r\n */\r\nexport function getBindingFor(ele, directives) {\r\n    // FIXME: refactor this entire function to be faster and more efficient\r\n\r\n\r\n    // template bindings Map() structure:\r\n    //\r\n    //      bindings = Map(\r\n    //          [path, via, childNodes, to, element]: [ directive instances ],\r\n    //          // example:\r\n    //          [0,1,3]: [ directiveInstance1, directiveInstance2 ]\r\n    //      )\r\n    //  }\r\n    //\r\n\r\n    // The goal is to be able to provide a path to each elements for which a group of directives will be applied.\r\n    const bindings          = new Map(); // FIXME: these can be global and reusable - since we only ever have one call in flight to this function\r\n    const eleToBindings     = new Map();\r\n    const ignoredChildren   = new Set();\r\n    let domEle;\r\n\r\n    // FIXME: convert to singleton function\r\n    //          Arguments should be:\r\n    //                  Directive, domEle, eleToBindings, ignoreChildren\r\n    //          Returns a boolean\r\n    const directiveIterator = Directive => {\r\n        let attrName;\r\n        let attrValue;\r\n        let managesNode;\r\n        let elePlaceholder = domEle;\r\n\r\n        while ((attrName = Directive.has(domEle))) {\r\n            attrValue = getAttribute(domEle, attrName);\r\n            managesNode = Directive.manages();\r\n\r\n            if (managesNode) {\r\n                elePlaceholder = createComment(\"\");\r\n            }\r\n\r\n            getArrayForNodeFromMap(eleToBindings, elePlaceholder).push(\r\n                getDirectiveForAttribute(Directive, attrName, attrValue)\r\n            );\r\n\r\n            removeAttribute(domEle, attrName);\r\n\r\n            if (managesNode) {\r\n                ignoredChildren.add(domEle);\r\n\r\n                // Replace this node with a Comment, and store the node's html\r\n                // as the comment data, which is then used by the directive instance\r\n                // to `render()` it to DOM when applicable\r\n                domEle.parentNode.insertBefore(elePlaceholder, domEle);\r\n                const fakeEle = createElement(\"div\");\r\n                fakeEle.appendChild(domEle);\r\n                elePlaceholder.data = fakeEle.innerHTML;\r\n            }\r\n        }\r\n        return managesNode;\r\n    };\r\n\r\n    // FIXME: convert to singleton Function\r\n    //          Arguments needed:\r\n    //              child, eleToBindings,\r\n    const processTextNode = child => {\r\n        if (hasToken(child)) {\r\n            reTokenMatch.lastIndex = 0;\r\n            let nodeValue = getNodeValue(child);\r\n            let childTokenMatches = reTokenMatch.exec(nodeValue);\r\n\r\n            while (childTokenMatches) {\r\n                // If no need to split the text node, then just create a binding for it and exit\r\n                if (nodeValue === \"{{\" + childTokenMatches[1] + \"}}\") {\r\n                    getArrayForNodeFromMap(eleToBindings, child).push(getTextBindingForToken(TextBinding, childTokenMatches[1]));\r\n                    childTokenMatches = null;\r\n                }\r\n                else {\r\n                    let tokenTextNode = nodeSplitText(child, childTokenMatches.index);\r\n\r\n                    // IF browser drops empty nodes, then fix the child node (which now is the left portion\r\n                    // of the split)\r\n                    if (DROPS_NODES_ON_CLONE) {\r\n                        fixEmptyTextNode(child);\r\n                    }\r\n\r\n                    // Split again at the end of token, so that we have a dedicated text node for the token value.\r\n                    // Because this will be used as a template, also need to replace this token value node\r\n                    // with an HTML comment, which will be replaced later during directive initialization\r\n                    // The remainder of the Text value is assigned back to `child` so that we can continue\r\n                    // to check it for other text tokens.\r\n                    child = nodeSplitText(tokenTextNode, childTokenMatches[0].length);\r\n                    const tokenPlaceholder = tokenTextNode.parentNode.insertBefore(createComment(UUID), tokenTextNode);\r\n                    tokenTextNode.parentNode.removeChild(tokenTextNode);\r\n\r\n                    getArrayForNodeFromMap(eleToBindings, tokenPlaceholder).push(getTextBindingForToken(TextBinding, childTokenMatches[1]));\r\n\r\n                    // Reset the regular expression (since `child` was also \"reset\") and execute\r\n                    // the regular expression again on the remaining text\r\n                    reTokenMatch.lastIndex = 0;\r\n                    childTokenMatches = reTokenMatch.exec(getNodeValue(child));\r\n\r\n                    if (!childTokenMatches && DROPS_NODES_ON_CLONE) {\r\n                        fixEmptyTextNode(child);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // FIXME: convert to for() loop - Perf!\r\n    findAllNodes(ele).forEach(node => {\r\n        let skip = false;\r\n\r\n        if (ignoredChildren.size) {\r\n            for (let ignoredParent of ignoredChildren.values()) {\r\n                if (NODE_CONTAINS_MISSES_TEXT_NODES && node.nodeType === 3) {\r\n                    if (ignoredParent.compareDocumentPosition(node) & 16) {\r\n                        skip = true;\r\n                    }\r\n                }\r\n                else if (ignoredParent.contains(node)) {\r\n                    skip = true;\r\n                }\r\n\r\n                if (skip) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        domEle = node;\r\n\r\n        if (!skip) {\r\n            // Process Element level Directives\r\n            if (node.nodeType === 1) {\r\n                directives.some(directiveIterator);\r\n            }\r\n            // TEXT nodes\r\n            else if (node.nodeType === 3) {\r\n                processTextNode(node);\r\n            }\r\n        }\r\n    });\r\n\r\n    domEle = null;\r\n\r\n\r\n    // Create the list array of node indexes for each binding processed\r\n    eleToBindings.forEach((directiveBindings, bindingEle) => {\r\n        if (ele === bindingEle) {\r\n            bindings.set([], directiveBindings);\r\n            return;\r\n        }\r\n\r\n        const path  = [];\r\n        let walkEle = bindingEle;\r\n        let parent  = walkEle.parentNode;\r\n\r\n        while (walkEle !== ele) {\r\n            path.unshift(path.indexOf.call(parent.childNodes, walkEle));\r\n            walkEle = walkEle.parentNode;\r\n            parent  = walkEle.parentNode;\r\n        }\r\n\r\n        bindings.set(path, directiveBindings);\r\n    });\r\n\r\n    eleToBindings.clear();\r\n    ignoredChildren.clear();\r\n\r\n    return bindings;\r\n}\r\n\r\n/**\r\n * Applies the bindings in the given Map to the DocumentFragment provided on input.\r\n *\r\n * @param {DocumentFragment} frag\r\n * @param {Map<Array<Number>, Array<Directive>>} bindings\r\n * @param {Array<Directive>} Directives\r\n *\r\n * @return {Array<NodeHandler>}\r\n *  An array of Node directive handlers is returned.\r\n */\r\nexport function applyBindingsToTemplateInstance(frag, bindings, Directives) {\r\n    const response = [];\r\n\r\n    bindings.forEach((directivesInstances, path) => {\r\n        const node = getNodeAt(frag, path);\r\n        if (!node) {\r\n            logError(new Error(`dom-data-bind#render(): Unable to find node!`));\r\n            return;\r\n        }\r\n\r\n        for (let i=0, t=directivesInstances.length; i < t; i++) {\r\n            response.push(directivesInstances[i].getNodeHandler(node, Directives));\r\n        }\r\n    });\r\n\r\n    return response;\r\n}\r\n\r\nfunction getNodeAt(root, path) {\r\n    if (!path.length) {\r\n        return root;\r\n    }\r\n    // FIXME: use for loop here.\r\n    arrayForEach(path, index => root = root.childNodes[index]);\r\n    return root;\r\n}\r\n\r\nfunction getArrayForNodeFromMap(map, node) {\r\n    if (!map.has(node)) {\r\n        map.set(node, []);\r\n    }\r\n    return map.get(node);\r\n}\r\n\r\n/**\r\n * Returns a node handlers for the given directive\r\n *\r\n * @param {Directive} Directive\r\n * @param {String} tokenText\r\n *  The token text (no curly braces)\r\n *\r\n * @returns {Directive}\r\n *  Returns a Directive instance. Call `.getNodeHandler` to get a handler for a given node\r\n */\r\nfunction getTextBindingForToken(Directive, tokenText) {\r\n    tokenText = tokenText.trim();\r\n\r\n    let directiveInstances = PRIVATE.get(Directive);\r\n\r\n    if (!directiveInstances) {\r\n        directiveInstances = {};\r\n        PRIVATE.set(Directive, directiveInstances);\r\n    }\r\n\r\n    if (!directiveInstances[tokenText]) {\r\n        directiveInstances[tokenText] = new Directive(tokenText);\r\n    }\r\n\r\n    return directiveInstances[tokenText];\r\n}\r\n\r\nfunction getDirectiveForAttribute (Directive, attrName, attrValue) {\r\n    attrValue = attrValue.trim();\r\n\r\n    const directiveSignature    = `${attrName}-${ UUID }-${ attrValue }`;\r\n    let directiveInstances      = PRIVATE.get(Directive);\r\n\r\n    if (!directiveInstances) {\r\n        directiveInstances = {};\r\n        PRIVATE.set(Directive, directiveInstances);\r\n    }\r\n\r\n    if (!directiveInstances[directiveSignature]) {\r\n        directiveInstances[directiveSignature] = new Directive(attrName, attrValue);\r\n    }\r\n\r\n    return directiveInstances[directiveSignature];\r\n}\r\n\r\n/**\r\n *\r\n * @private\r\n * @param {HTMLElement} ele\r\n * @returns {boolean}\r\n */\r\nfunction onlyElementsWithAttributes(ele/*, index, arr*/) {\r\n    return ele.nodeType !== 1 || (ele.nodeType === 1 && ele.attributes.length > 0);\r\n}\r\n\r\n/**\r\n *\r\n * @private\r\n * @param {Array} resultArr\r\n * @param {HTMLElement} ele\r\n * @returns {Array}\r\n */\r\nfunction addTextNodes(resultArr, ele /*, index, arr*/) {\r\n    resultArr.push(ele);\r\n    if (ele.hasChildNodes()) {\r\n        ele = ele.firstChild;\r\n        for (;ele;) {\r\n            const nextSibling = ele.nextSibling;\r\n\r\n            // IF Text node and it has the token\r\n            if (ele.nodeType === 3 && !!ele.nodeValue && reHasDataToken.test(getNodeValue(ele))) {\r\n                resultArr.push(ele);\r\n            }\r\n\r\n            if (DROPS_NODES_ON_CLONE) {\r\n                fixEmptyTextNode(ele);\r\n            }\r\n\r\n            ele = nextSibling;\r\n        }\r\n    }\r\n    return resultArr;\r\n}\r\n\r\nfunction fixEmptyTextNode(node) {\r\n    if (node.nodeType === 3 && DROPS_NODES_ON_CLONE && !node.nodeValue) {\r\n        node.parentNode.insertBefore(createComment(\"\"), node);\r\n        node.parentNode.removeChild(node);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @private\r\n * @param {HTMLElement} ele\r\n *\r\n * @return {Array<Node>}\r\n */\r\nfunction findAllNodes(ele) {\r\n    return [ele]\r\n        .concat(domFind(ele, \"*\"))\r\n        .reduce(addTextNodes, [])\r\n        .filter(onlyElementsWithAttributes);\r\n}\r\n\r\n\r\n","import Template from \"./Template.js\"\r\nimport {isString} from \"./utils.js\";\r\nimport {isTemplate} from \"./utils.js\";\r\n\r\n\r\n//==========================================================================\r\n// Keeps a map between `html string` and `Template` instance\r\nconst TEMPLATES = new Map();\r\n\r\n/**\r\n * Create a UI view template for the given html string. Returned view (Template) are cached (memoized)\r\n * and thus a previously view template will just return the previous Template instance\r\n *\r\n * @param {String|HTMLTemplateElement} html\r\n * @param {Array<Directive>} directives\r\n *\r\n * @returns {HTMLTemplateElement}\r\n */\r\nexport function view(html, directives = view.directives || []) {\r\n    const isHtmlString = isString(html);\r\n    const cacheKey = isHtmlString ? html : html.innerHTML;\r\n\r\n    if (!hasTemplate(cacheKey)) {\r\n        TEMPLATES.set(\r\n            cacheKey,\r\n            new Template(html, directives)\r\n        );\r\n    }\r\n\r\n    // DEVELOPMENT MODE (is removed during webpack build)\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n        if (!isString(html) && !isTemplate(html)) {\r\n            console.warn(`dom-data-bind.view(): 'html' argument must be either String or HTMLTemplateElement!`); //eslint-disable-line\r\n        }\r\n    }\r\n\r\n    return TEMPLATES.get(cacheKey);\r\n}\r\n\r\n/**\r\n * A list of directives that might be used in views. Used as the default value to the\r\n * `directives` input argument of `view()`.\r\n *\r\n * @type {Array<Directive>>|null}\r\n */\r\nview.directives = null;\r\n\r\n/**\r\n * Checks if a view template already exists for the given html\r\n *\r\n * @type {function(*=): boolean}\r\n */\r\nview.has = hasTemplate;\r\n\r\n/**\r\n * Checks if a view template already exists for the given html\r\n * @param html\r\n * @returns {boolean}\r\n */\r\nfunction hasTemplate(html) {\r\n    return TEMPLATES.has(html);\r\n}\r\n","import {arraySlice} from \"./utils.js\";\r\n\r\n/**\r\n * Interface for a template instance.\r\n */\r\nexport class TemplateInstance {\r\n    /**\r\n     *\r\n     * @param {DocumentFragment} docFrag\r\n     * @param {Array<NodeHandler>} bindings\r\n     * @param {String} [templateId]\r\n     */\r\n    constructor(docFrag, bindings, templateId = \"\") {\r\n        this._frag = docFrag;\r\n        this._bindings = bindings;\r\n        this._childNodes = arraySlice(docFrag.childNodes, 0);\r\n        this.fromTemplateId = templateId;\r\n    }\r\n\r\n    /**\r\n     * Recovers the original nodes rendered from the template into\r\n     * the DocumentFragment\r\n     */\r\n    recover() {\r\n        this._childNodes.forEach(nodeEle => this._frag.appendChild(nodeEle));\r\n    }\r\n\r\n    /**\r\n     * Destroys all bindings of the Template\r\n     */\r\n    destroy() {\r\n        if (this._bindings) {\r\n            for (let i = 0, t = this._bindings.length; i < t; i++) {\r\n                this._bindings[i].destroy();\r\n            }\r\n            this._bindings.length = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets data on the Template by passing it to all directives to act on.\r\n     * @param data\r\n     */\r\n    setData(data) {\r\n        for (let i = 0, t = this._bindings.length; i < t; i++) {\r\n            this._bindings[i].render(data);\r\n        }\r\n    }\r\n}\r\n","import {view} from \"./view.js\";\r\nimport {DOM_DATA_BIND_PROP} from \"./utils.js\";\r\nimport {TemplateInstance} from \"./TemplateInstance.js\";\r\nimport {applyBindingsToTemplateInstance, Template} from \"./Template.js\";\r\n\r\n\r\n//==========================================================================\r\n\r\n/**\r\n * Returns a DocumentFragment representation of the given `html` code provided on\r\n * input bound to the given data.\r\n *\r\n * @param {String|HTMLTemplateElement|Template} html\r\n * @param {Object} [data]\r\n * @param {Array<Directive>} [directives]\r\n *\r\n * @return {DocumentFragment}\r\n *  Document Fragment returned will have a property named 'DomDataBind', which is\r\n *  a TemplateInstance class instance\r\n */\r\nexport function render(html, data, directives) {\r\n    const viewTemplate = html instanceof Template ? html : view(html, directives);\r\n    const response = document.importNode(viewTemplate.ele.content, true);\r\n\r\n    response[DOM_DATA_BIND_PROP] = new TemplateInstance(\r\n        response,\r\n        applyBindingsToTemplateInstance(response, viewTemplate._bindings, viewTemplate._directives),\r\n        viewTemplate.id\r\n    );\r\n    response[DOM_DATA_BIND_PROP].setData(data);\r\n    return response;\r\n}\r\n\r\nexport default render;\r\n","import Compose from \"@purtuga/common/src/jsutils/Compose\"\r\nimport { PRIVATE, arrayForEach, isString } from \"./utils\"\r\nimport { getBindingFor, applyBindingsToTemplateInstance } from \"./Template\"\r\nimport { render } from \"./render\";\r\n\r\n//======================================================================\r\n\r\n/**\r\n * Bind data to a DOM element and automatically persist changes in that data to the UI.\r\n * By default, this constructor provides interpolation of Text tokens found in the DOM\r\n * structure (represented with double curly braces: `{{ }}`). Directives can be used\r\n * by extending this constructor and adding them to the [directives]{@link DomDataBind.directives}\r\n * static property.\r\n *\r\n * @class DomDataBind\r\n * @extends Compose\r\n *\r\n * @param {String |HTMLElement} html\r\n *  The HTML element that will be view and to which `data` will be bound.\r\n *\r\n * @param {Object} data\r\n *  An object whose data will be used to bind to `html` element (once crated) .\r\n *\r\n */\r\nexport const DomDataBind = Compose.extend({\r\n    /**\r\n     * The Element whose data was bound to.\r\n     * When a string is used on input, this will be a DocumentFragment, which\r\n     * means that it could be empty if its content was inserted into DOM\r\n     */\r\n    $ele: null,\r\n\r\n    init(html, data) {\r\n        const Factory = this.getFactory();\r\n        const state = {\r\n            html,\r\n            data,\r\n            directives: Factory.directives.slice(0)\r\n        };\r\n\r\n        PRIVATE.set(this, state);\r\n\r\n        if (isString(html)) {\r\n            this.$ele = render(html, data, state.directives);\r\n            state.bindings = this.$ele._bindings;\r\n        } else {\r\n            this.$ele = html;\r\n            state.bindings = applyBindingsToTemplateInstance(html, getBindingFor(html, state.directives), state.directives);\r\n            if (data) {\r\n                this.setData(data);\r\n            }\r\n        }\r\n\r\n        this.onDestroy(() => {\r\n            arrayForEach(state.bindings, binding => binding.destroy());\r\n\r\n            delete state.data;\r\n            delete state.directives;\r\n            delete state.bindings;\r\n\r\n            Factory.getDestroyCallback(state, PRIVATE)();\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Set data on to the DOM provided during initialization.\r\n     * In most cases, you should never have the need to call this method. Data\r\n     * provided during initialization is \"live\" and changes are automatically\r\n     * reflected to dom.\r\n     */\r\n    setData(data) {\r\n        const bindings = PRIVATE.get(this).bindings;\r\n        arrayForEach(bindings, binding => binding.render(data));\r\n    }\r\n});\r\nexport default DomDataBind;\r\n\r\n/**\r\n * A list of Directives to be used.\r\n *\r\n * @name DomDataBind.directives\r\n * @type {Array}\r\n */\r\nDomDataBind.directives = [];\r\n","import Directive                from \"./Directive\"\r\nimport {\r\n    PRIVATE,\r\n    removeAttribute,\r\n    setAttribute,\r\n    createValueGetter,\r\n    getNodeAttrNames } from \"../utils\"\r\nimport {NodeHandler} from \"./NodeHandler.js\";\r\n\r\n//============================================\r\nconst attrRegExp = /^_attr\\.(.*)/;\r\n\r\nexport class AttrDirective extends Directive {\r\n    static NodeHandlerConstructor = class extends NodeHandler {\r\n        update(newValue) {\r\n            const state = PRIVATE.get(this);\r\n            const _htmlAttr = this._directive._htmlAttr;\r\n\r\n            if (this._directive.constructor._isProp) {\r\n                if (newValue !== state.value) {\r\n                    this._node[_htmlAttr] = newValue;\r\n                }\r\n            }\r\n            else {\r\n                if (newValue && state.value !== newValue) {\r\n                    setAttribute(this._node, _htmlAttr, newValue);\r\n                }\r\n                else if (state.value && !newValue) {\r\n                    removeAttribute(this._node, _htmlAttr);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    static _matches = attrRegExp;\r\n\r\n    static _isProp = false;\r\n\r\n    static has(ele) {\r\n        let directiveAttr = \"\";\r\n        getNodeAttrNames(ele).some(attr => this._matches.test(attr) && (directiveAttr = attr));\r\n        return directiveAttr;\r\n    }\r\n\r\n    init(attr, attrValue) {\r\n        this._attr              = attr;\r\n        this._tokenValueGetter  = createValueGetter((attrValue || \"\"), \"attr\");\r\n        this._htmlAttr          = (new RegExp(this.constructor._matches)).exec(attr)[1];\r\n    }\r\n}\r\n\r\nexport default AttrDirective;\r\n","/**\r\n * Check if an element has a given class\r\n *\r\n * @function domHasClass\r\n *\r\n * @param {HTMLElement} el\r\n * @param {String} cssClass\r\n *\r\n * @return {Boolean}\r\n */\r\nexport function domHasClass(el, cssClass){\r\n    if (el && cssClass) {\r\n        return el.classList.contains(cssClass);\r\n    }\r\n    return false;\r\n}\r\nexport default domHasClass;\r\n","/**\r\n * Adds class to an element\r\n *\r\n * @function domAddClass\r\n *\r\n * @param {HTMLElement} el\r\n * @param {String} cssClass\r\n *  Multiple classes can be set using spaces as a delimiter\r\n */\r\nexport function domAddClass(el, cssClass){\r\n    let classNameList = String(cssClass).trim().split(/\\s+/).map(className => className.trim());\r\n    if (el && classNameList.length) {\r\n        classNameList.forEach((cssClass) => el.classList.add(cssClass));\r\n    }\r\n}\r\nexport default domAddClass;","/**\r\n * removes a class from an element\r\n *\r\n * @function domRemoveClass\r\n *\r\n * @param {HTMLElement} el\r\n * @param {String} cssClass\r\n */\r\nexport function domRemoveClass(el, cssClass){\r\n    return el.classList.remove(cssClass);\r\n}\r\nexport default domRemoveClass;","import domHasClass      from \"@purtuga/common/src/domutils/domHasClass\"\r\nimport domAddClass      from \"@purtuga/common/src/domutils/domAddClass\"\r\nimport domRemoveClass   from \"@purtuga/common/src/domutils/domRemoveClass\"\r\nimport Directive        from \"./Directive\"\r\nimport {\r\n    PRIVATE,\r\n    createValueGetter,\r\n    hasAttribute  } from \"../utils\"\r\nimport {NodeHandler} from \"./NodeHandler.js\";\r\n\r\n//============================================\r\nconst DIRECTIVE = \"_class\";\r\n\r\nexport class ClassDirective extends Directive {\r\n    static NodeHandlerConstructor = class ClassDirectiveNodeHandler extends NodeHandler {\r\n        update(newClasses) {\r\n            const { _node: node } = this;\r\n            const oldClasses = PRIVATE.get(this).value || {};\r\n\r\n            Object.keys(newClasses)\r\n                .concat(Object.keys(oldClasses))\r\n                .forEach(className => {\r\n                    if (newClasses[className] && !domHasClass(node, className)) {\r\n                        domAddClass(node, className);\r\n                    }\r\n                    else if (!newClasses[className] && domHasClass(node, className)) {\r\n                        domRemoveClass(node, className);\r\n                    }\r\n                });\r\n        }\r\n    };\r\n\r\n    static has(ele) {\r\n        return hasAttribute(ele, DIRECTIVE) ? DIRECTIVE : \"\";\r\n    }\r\n\r\n    init(attr, attrValue) {\r\n        this._attr              = attr;\r\n        this._tokenValueGetter  = createValueGetter((attrValue || \"\"), \"class\");\r\n    }\r\n}\r\n\r\nexport default ClassDirective;\r\n\r\n","import Map from \"@purtuga/common/src/jsutils/es6-Map\"\r\nimport {domInsertBefore} from \"@purtuga/common/src/domutils/domInsertBefore.js\"\r\nimport {\r\n    arraySplice,\r\n    isArray,\r\n    objectKeys\r\n} from \"@purtuga/common/src/jsutils/runtime-aliases.js\"\r\nimport Directive from \"./Directive\"\r\nimport {\r\n    arrayForEach,\r\n    createComment,\r\n    createValueGetter,\r\n    DOM_DATA_BIND_PROP,\r\n    getAttribute,\r\n    hasAttribute,\r\n    isPureObject,\r\n    PRIVATE,\r\n    removeAttribute,\r\n    removeChild\r\n} from \"../utils\"\r\n\r\nimport {render} from \"../render\";\r\nimport {view} from \"../view.js\";\r\nimport {NodeHandler} from \"./NodeHandler.js\";\r\n\r\n//============================================\r\nconst EACH = Symbol(\"directive.each.setup\");\r\nconst DIRECTIVE     = \"_each\";\r\nconst KEY_DIRECTIVE = \"_key\";\r\nconst destroyBinder = binder => binder._destroy();\r\nconst defaultRowKey = data => data;\r\nconst isEmptyList   = list => (isArray(list) && !list.length) || (isPureObject(list) && !objectKeys(list).length);\r\n\r\nclass EachDirectiveNodeHandler extends NodeHandler {\r\n\r\n    binders = [];\r\n\r\n    bindersByKey = new Map();\r\n\r\n    listIterator = () => this._directive.iterateOverList(this, PRIVATE.get(this).value);\r\n\r\n    init(directive, node, directives) {\r\n        super.init(directive, node, directives);\r\n        this._placeholderEle = createComment(\"directive.each\");\r\n        this._isSoleChild = hasDedicatedParent(this._node);\r\n\r\n        // create the template for the row content, which is stored in the Comment node data\r\n        this._viewTemplate = view(node.data, directives);\r\n        if (!this._viewTemplate[EACH]) {\r\n            setupViewTemplate(this._viewTemplate);\r\n        }\r\n\r\n        domInsertBefore(this._placeholderEle, node);\r\n        removeChild(node.parentNode, node);\r\n    }\r\n\r\n\r\n    update(newList) {\r\n        const state = PRIVATE.get(this);\r\n\r\n        if (newList !== state.value) {\r\n            state.value = null;\r\n\r\n            if (this.listIterator.stopWatchingAll) {\r\n                this.listIterator.stopWatchingAll();\r\n            }\r\n        }\r\n\r\n        if (!newList) {\r\n            this._directive.destroyChildBinders(this.binders, this);\r\n            return;\r\n        }\r\n\r\n        state.value = newList;\r\n\r\n        if (isEmptyList(newList) && this.binders) {\r\n            this._directive.destroyChildBinders(this.binders, this);\r\n        }\r\n        else {\r\n            this.listIterator();\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        // Support for Observables\r\n        if (this.listIterator.stopWatchingAll) {\r\n            this.listIterator.stopWatchingAll();\r\n        }\r\n        this.bindersByKey.clear();\r\n        this._directive.destroyChildBinders(this.binders, this);\r\n        super.destroy();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Directive to loop through an array or object. In addition, it also support an\r\n * internal binding directive called `b:key`\r\n *\r\n * @class EachDirective\r\n * @extends Directive\r\n *\r\n * @example\r\n *\r\n * // Use with array:\r\n * _each=\"item of arrayList\"\r\n * _each=\"(item, index) of arrayList\"\r\n *\r\n * // Use with Object\r\n * _each=\"value of objectList\"\r\n * _each=\"(value, key) of objectList\"\r\n */\r\nexport class EachDirective extends Directive {\r\n    static NodeHandlerConstructor = EachDirectiveNodeHandler;\r\n\r\n    static has(ele) {\r\n        return hasAttribute(ele, DIRECTIVE) ? DIRECTIVE : \"\";\r\n    }\r\n\r\n    static manages() { return true; }\r\n\r\n    init(attr, attrValue) {\r\n        const [ iteratorArgs, listVar ] = parseDirectiveValue((attrValue || \"\").trim());\r\n        this._attr              = attr;\r\n        this._iteratorArgs      = iteratorArgs;\r\n        this._tokenValueGetter  = createValueGetter((listVar || \"\"), \"each\");\r\n    }\r\n\r\n    /**\r\n     * Destroy the binder instances and remove Elements from DOM.\r\n     *\r\n     * @param binders\r\n     * @param handler\r\n     */\r\n    destroyChildBinders(binders, handler) {\r\n        if (!binders || !binders.length) {\r\n            return;\r\n        }\r\n\r\n        binders = binders.splice(0);\r\n\r\n        if (handler._isSoleChild) { // Supper fast way to just clear the UI\r\n            const parentEle = handler._placeholderEle.parentNode;\r\n            parentEle.textContent = \"\";\r\n            parentEle.appendChild(handler._placeholderEle);\r\n            setTimeout(() => {\r\n                arrayForEach(binders, binder => binder._destroy());\r\n            });\r\n        }\r\n        else {\r\n            arrayForEach(binders, binder => binder._destroy());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an object (`dataObj` if provided on input) with additional keys - each\r\n     * one being the argNames that the user defined in their HTML `_each` template.\r\n     *\r\n     * It essentially matches up two array by using the keys from one array and mapping to\r\n     * values from the second array at exactly the same location.\r\n     * Example:\r\n     *\r\n     *      _each=\"item in arrayList\"\r\n     *      arrayList = [ \"value 1\" ]\r\n     *\r\n     *      // Array Keys           // Array values             // result: object\r\n     *      // Defined in the       // Data in actual           // Matches the key\r\n     *      // template             // Array                    // to the data\r\n     *      //-------------------   //-----------------         //---------------------\r\n     *      [                       [                   ===     {\r\n     *          \"item\"                  \"value 1\"       ===         item: \"value1\"\r\n     *      ]                       ]                   ===     }\r\n     *\r\n     * @param {Array} values\r\n     * @param {Object} [dataObj]\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    getDataForIteration(values, dataObj) {\r\n        return this._iteratorArgs.reduce(\r\n            (rowData, argName) => {\r\n                rowData[argName] = values.shift();\r\n                return rowData;\r\n            },\r\n            dataObj || {}\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Iterates over a new set (list) and eitehr updates or builds out new elements for each item\r\n     * in that list.\r\n     *\r\n     * @param handler\r\n     * @param newData\r\n     */\r\n    iterateOverList(handler, newData) {\r\n        /** @type NodeHandlerState */\r\n        const state = PRIVATE.get(handler);\r\n        let isDataArray             = isArray(newData);\r\n        let iterationDataList;\r\n\r\n\r\n        if (isDataArray) {\r\n            isDataArray = true;\r\n            iterationDataList = newData;\r\n        }\r\n        else if (isPureObject(newData)) {\r\n            iterationDataList = objectKeys(newData);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        const currentBinders        = handler.binders;\r\n        const binderToBeDestroyed   = new Map();    // Will be recycled\r\n        const totalItems            = iterationDataList.length;\r\n        const { usesKey, getKey }   = handler._viewTemplate[EACH];\r\n\r\n        // Loop through each piece of data and build a DOM binder for it.\r\n        // The data should be in sync with `currentBinders`\r\n        for (let i = 0; i < totalItems; i++) {\r\n            let rowData = { // FIXME: can this object creation be avoided? For Arrays - it should be possible. Objects - not sure.\r\n                $root: state.data.$root || state.data,\r\n                $parent: state.data,\r\n                $data: state.data.$data || state.data\r\n            };\r\n\r\n            // Adjust the rowData to have the `key` and/or `value` and `index` as top level items\r\n            // These are added to the rowData object just created above.\r\n            if (isDataArray) {\r\n                this.getDataForIteration([ iterationDataList[i], i ], rowData);\r\n            }\r\n            else {\r\n                this.getDataForIteration([ newData[ iterationDataList[i] ], iterationDataList[i], i ], rowData);\r\n            }\r\n\r\n            const rowKey = getKey(\r\n                usesKey\r\n                    ? rowData                               // => Use rowData created above - getKey() will run a value getter on it.\r\n                    : isDataArray\r\n                        ? iterationDataList[i]              // => Use the object from the newData\r\n                        : newData[ iterationDataList[i] ]   // => Use the Object key\r\n            );\r\n\r\n            // If a binder currently exists, then see if it is the one previously\r\n            // created for this row's data\r\n            if (currentBinders[i] && currentBinders[i]._loop.rowKey === rowKey) {\r\n                currentBinders[i][DOM_DATA_BIND_PROP].setData(rowData);\r\n                continue;\r\n            }\r\n\r\n            // If there is a binder at the current position, then its not the one need.\r\n            // move it to the `to be destroyed` list.\r\n            if (currentBinders[i]) {\r\n                currentBinders[i][DOM_DATA_BIND_PROP].recover();\r\n                binderToBeDestroyed.set(\r\n                    currentBinders[i]._loop.rowKey,\r\n                    currentBinders[i]\r\n                );\r\n                currentBinders[i] = null;\r\n            }\r\n\r\n            // Do we have a rowBinder for this data item in the existing list,\r\n            // but perhaps at a different location? Get it and move it to the new position.\r\n            // Old position in the existing array is set to null (avoids mutating array)\r\n            let binder = handler.bindersByKey.get(rowKey);\r\n\r\n            if (binder) {\r\n                if (binder._loop.pos !== null && currentBinders[binder._loop.pos] === binder) {\r\n                    currentBinders[binder._loop.pos] = null;\r\n                }\r\n            } else {\r\n                binder = binderToBeDestroyed.get(rowKey);\r\n\r\n                if (binder) {\r\n                    binderToBeDestroyed.delete(rowKey);\r\n                }\r\n            }\r\n\r\n            if (binder) {\r\n                currentBinders[i] = binder;\r\n                binder._loop.pos = i;\r\n                currentBinders[i][DOM_DATA_BIND_PROP].recover();\r\n                positionRowInDom(currentBinders, i, handler._placeholderEle);\r\n                currentBinders[i][DOM_DATA_BIND_PROP].setData(rowData);\r\n                continue;\r\n            }\r\n\r\n            // Create new binder\r\n            // First check if we can recycle one that is tagged to be destroyed.\r\n            // if not, then create a new one.\r\n            if (binderToBeDestroyed.size) {\r\n                const [recycleBinderKey, recycleBinder] = binderToBeDestroyed.entries().next().value;\r\n                binder = recycleBinder;\r\n                binder[DOM_DATA_BIND_PROP].setData(rowData);\r\n                binderToBeDestroyed.delete(recycleBinderKey);\r\n                binder._loop.rowKey = rowKey;\r\n                binder._loop.pos = i;\r\n            } else {\r\n                binder = render(handler._viewTemplate, rowData, handler._directives);\r\n                binder._destroy = destroyRowElement;\r\n                binder._handler = handler; // needed by destroyRowElement()\r\n                binder._loop  = { rowKey, pos: i };\r\n            }\r\n\r\n            currentBinders[i] = binder;\r\n            handler.bindersByKey.set(rowKey, binder);\r\n            positionRowInDom(currentBinders, i, handler._placeholderEle);\r\n        }\r\n\r\n        // Destroy binders that were not used\r\n        if (binderToBeDestroyed.size) {\r\n            arrayForEach(binderToBeDestroyed.values(), destroyBinder);\r\n            binderToBeDestroyed.clear();\r\n        }\r\n\r\n        // remove any left over items in currentBinders where is no longer part of newData\r\n        if (totalItems < currentBinders.length) {\r\n            arrayForEach(arraySplice(currentBinders, totalItems), destroyBinder);\r\n        }\r\n    }\r\n}\r\n\r\nfunction setupViewTemplate (viewTemplate) {\r\n    if (!viewTemplate[EACH]) {\r\n        viewTemplate[EACH] = {\r\n            usesKey: false,\r\n            getKey: defaultRowKey\r\n        };\r\n        const firstChildNode = viewTemplate.ele.content.firstChild;\r\n\r\n        if (\r\n            firstChildNode &&\r\n            firstChildNode.hasAttribute &&\r\n            hasAttribute(firstChildNode, KEY_DIRECTIVE)\r\n        ) {\r\n            viewTemplate[EACH].usesKey = true;\r\n            viewTemplate[EACH].getKey = createValueGetter(getAttribute(firstChildNode, KEY_DIRECTIVE), \"each.key\");\r\n            removeAttribute(firstChildNode, KEY_DIRECTIVE);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction positionRowInDom(currentBinders, binderIndex, defaultInsertMarkerElement) {\r\n    const binder = currentBinders[binderIndex];\r\n\r\n    // Get all original nodes from binder back to the DocumentFragment\r\n    binder[DOM_DATA_BIND_PROP].recover();\r\n\r\n    // If we have a binder after this one, then do an insertBefore using the first node of the nextSibling\r\n    if (currentBinders[binderIndex + 1]) {\r\n        domInsertBefore(binder, currentBinders[binderIndex + 1][DOM_DATA_BIND_PROP]._childNodes[0]);\r\n    } else {\r\n        // Just place the binder before the marker\r\n        domInsertBefore(binder, defaultInsertMarkerElement);\r\n    }\r\n}\r\n\r\nfunction destroyRowElement () {\r\n    // remove all elements/nodes of this row from DOM\r\n    this[DOM_DATA_BIND_PROP].recover();\r\n\r\n    if (this._loop.rowKey) {\r\n        this._handler.bindersByKey.delete(this._loop.rowKey);\r\n    }\r\n\r\n    this[DOM_DATA_BIND_PROP].destroy();\r\n}\r\n\r\nfunction parseDirectiveValue(attrValue) {\r\n    let matches = /\\(?(.+?)\\)?\\W?(?:of|in)\\W(.*)/.exec(attrValue);\r\n    if (matches) {\r\n        matches = matches.slice(1);\r\n        matches[0] = matches[0].split(/,/).map(argName => String(argName).trim());\r\n        return matches;\r\n    }\r\n    return [];\r\n}\r\n\r\nfunction hasDedicatedParent(node) {\r\n    return Array.prototype.every.call(node.parentNode.childNodes, childNode => {\r\n        return childNode === node || (childNode.nodeType === 3 && !childNode.textContent.trim());\r\n    });\r\n}\r\n\r\n\r\nexport default EachDirective;\r\n","import Directive                from \"./Directive\"\r\nimport {\r\n    PRIVATE,\r\n    createValueGetter,\r\n    hasAttribute } from \"../utils\"\r\nimport {NodeHandler} from \"./NodeHandler.js\";\r\n//============================================\r\nconst DIRECTIVE = \"_html\";\r\n\r\nexport class HtmlDirective extends Directive {\r\n    static NodeHandlerConstructor = class extends NodeHandler {\r\n        update(newValue) {\r\n            if (newValue === PRIVATE.get(this).value) {\r\n                return;\r\n            }\r\n\r\n            this._node.innerHTML = newValue;\r\n        }\r\n    };\r\n\r\n    static has(ele) {\r\n        return hasAttribute(ele, DIRECTIVE) ? DIRECTIVE : \"\";\r\n    }\r\n\r\n    init(attr, attrValue) {\r\n        this._attr              = attr;\r\n        this._tokenValueGetter  = createValueGetter((attrValue || \"\"), \"html\");\r\n    }\r\n}\r\n\r\nexport default HtmlDirective;\r\n\r\n","import Directive    from \"./Directive\"\r\nimport {\r\n    PRIVATE,\r\n    DOM_DATA_BIND_PROP,\r\n    hasAttribute,\r\n    createComment,\r\n    removeChild,\r\n    createValueGetter } from \"../utils\"\r\nimport {render} from \"../render\"\r\nimport {NodeHandler} from \"./NodeHandler.js\";\r\nimport {domInsertBefore} from \"@purtuga/common/src/domutils/domInsertBefore.js\"\r\n\r\n//============================================\r\nconst DIRECTIVE = \"_if\";\r\n\r\nexport class IfDirective extends Directive {\r\n    static NodeHandlerConstructor = class extends NodeHandler {\r\n\r\n        _renderedEle = null;\r\n\r\n        _renderTemplate = this._node.data;\r\n\r\n        init(...args) {\r\n            super.init(...args);\r\n            this._placeholderEle = createComment(\"directive.if\");\r\n            domInsertBefore(this._placeholderEle, this._node);\r\n            removeChild(this._node.parentNode, this._node);\r\n        }\r\n        update(showElement) {\r\n            const state = PRIVATE.get(this);\r\n\r\n            // If there is no change in Element visibility, then only update its data.\r\n            if (state.value === showElement) {\r\n                if (this._renderedEle) {\r\n                    this._renderedEle[DOM_DATA_BIND_PROP].setData(state.data);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (showElement && !this._renderedEle) {\r\n                this._renderedEle = render(this._renderTemplate, state.data, this._directives);\r\n                domInsertBefore(this._renderedEle, this._placeholderEle);\r\n            } else if (!showElement)  {\r\n                this.destroy_renderedEle();\r\n            }\r\n        }\r\n\r\n        destroy_renderedEle() {\r\n            if (this._renderedEle) {\r\n                this._renderedEle[DOM_DATA_BIND_PROP].recover();\r\n                this._renderedEle[DOM_DATA_BIND_PROP].destroy();\r\n                this._renderedEle = null;\r\n            }\r\n        }\r\n    };\r\n\r\n    static has(ele) {\r\n        return hasAttribute(ele, DIRECTIVE) ? DIRECTIVE : \"\";\r\n    }\r\n\r\n    static manages() { return true; }\r\n\r\n    init(attr, attrValue) {\r\n        this._attr              = attr;\r\n        this._tokenValueGetter  = createValueGetter((attrValue || \"\"), \"if\");\r\n    }\r\n}\r\n\r\nexport default IfDirective;\r\n","/**\r\n * Adds an event handler to a DOM element and returns back an\r\n * object that allows for removal of the event.\r\n *\r\n * @function domAddEventListener\r\n *\r\n * @param {HTMLElement} ele\r\n * @param {String} event\r\n *  The event to listen to (ex. `click`). Multiple events can be defined\r\n *  by separating them with whitespace\r\n * @param {Function} callback\r\n * @param {Boolean} [capture]\r\n *\r\n * @return DOMEventListener\r\n *\r\n * @example\r\n *\r\n * var listener = domAddEventHandler(myEle, \"click\", function(){});\r\n * ...\r\n * listener.remove();\r\n */\r\nexport function domAddEventListener(ele, event, callback, capture) {\r\n    let events      = event.split(/\\s+/);\r\n    let evListeners = {};\r\n\r\n    events.forEach(evName => {\r\n        ele.addEventListener(evName, callback, capture);\r\n        evListeners[evName] = {\r\n            remove: () => ele.removeEventListener(evName, callback, capture)\r\n        }\r\n    });\r\n\r\n    /**\r\n     * A DOM Event listener.\r\n     *\r\n     * @typedef {Object} DOMEventListener\r\n     *\r\n     * @property {Function} remove\r\n     * @property {Object} listeners\r\n     *  List of listeners that were bound to the DOM element. Each listeners has a\r\n     *  corresponding `.remove()` method.\r\n     */\r\n    return Object.create({\r\n        listeners: evListeners,\r\n        remove: function () {\r\n            events.forEach(evName => evListeners[evName].remove());\r\n        }\r\n    });\r\n}\r\nexport default domAddEventListener;\r\n","import domAddEventListener  from \"@purtuga/common/src/domutils/domAddEventListener\"\r\nimport Directive            from \"./Directive\"\r\nimport {\r\n    PRIVATE,\r\n    escapeString,\r\n    createValueGetter,\r\n    getNodeAttrNames,\r\n    logError } from \"../utils\"\r\n\r\n//============================================\r\nconst DIRECTIVE             = \"_on.\";\r\nconst matchesDirective      = new RegExp(`^${ escapeString(DIRECTIVE) }(.*)`);\r\n\r\nexport class OnDirective extends Directive {\r\n    static has(ele) {\r\n        let directiveAttr = \"\";\r\n        getNodeAttrNames(ele).some(attr => matchesDirective.test(attr) && (directiveAttr = attr));\r\n        return directiveAttr;\r\n    }\r\n\r\n\r\n    init(directiveAttr, attrValue) {\r\n        this._attr              = directiveAttr;\r\n        this._eventName         = (new RegExp(matchesDirective)).exec(directiveAttr)[1];\r\n        this._tokenValueGetter  = createValueGetter((attrValue || \"\"), \"on\");\r\n    }\r\n\r\n    /**\r\n     * Handles the event on the node\r\n     *\r\n     * @param {NodeHandler} handler\r\n     * @param {Event} domEv\r\n     */\r\n    handleEvent(handler, domEv) {\r\n        const state = PRIVATE.get(handler);\r\n\r\n        let tokenValue;\r\n        state.data.$ev = domEv;\r\n\r\n        try {\r\n            tokenValue = this._tokenValueGetter(state.data);\r\n        }\r\n        catch(e) {\r\n            logError(e);\r\n            return;\r\n        }\r\n\r\n        delete state.data.$ev;\r\n\r\n        if (\"function\" === typeof tokenValue) {\r\n            return tokenValue.call(handler._n, domEv);\r\n        }\r\n        // DOM EventHandler interface: object having a `handleEvent` method\r\n        else if (tokenValue && \"function\" === tokenValue.handleEvent) {\r\n            tokenValue.handleEvent.call(tokenValue, domEv);\r\n        }\r\n    }\r\n\r\n    // takes care of only storing the data on the node, for when the event is triggered\r\n    render(handler, node, data) {\r\n        let state = PRIVATE.get(handler);\r\n\r\n        if (!state) {\r\n            state = {\r\n                data:       { $data: {} },\r\n                tracker:    () => this.render(handler, node, state.data)\r\n            };\r\n            PRIVATE.set(handler, state);\r\n        }\r\n\r\n        if (data) {\r\n            if (data.$data) {\r\n                state.data = data;\r\n            }\r\n            else {\r\n                state.data.$data = data;\r\n            }\r\n        }\r\n    }\r\n\r\n    getNodeHandler(node) {\r\n        const handler = super.getNodeHandler(node);\r\n\r\n        // FIXME: this is not good - needs re-writing to ensure only one handle is attached.\r\n\r\n        const evListener = domAddEventListener(node, this._eventName, this.handleEvent.bind(this, handler));\r\n\r\n\r\n        handler.onDestroy(() => evListener.remove());\r\n        return handler;\r\n    }\r\n}\r\n\r\nexport default OnDirective;\r\n","import AttrDirective from \"./attr-directive\"\r\n\r\nconst matchRegExp = /^_prop\\.(.*)/;\r\nexport class PropDirective extends AttrDirective {\r\n    static get _matches() { return matchRegExp; }\r\n    static _isProp() { return true; }\r\n}\r\nexport default PropDirective;\r\n","import Directive        from \"./Directive\"\r\nimport {\r\n    createValueGetter,\r\n    hasAttribute    }   from \"../utils\"\r\nimport {NodeHandler} from \"./NodeHandler.js\";\r\n\r\n//============================================\r\nconst DIRECTIVE             = \"_show\";\r\nconst HIDDEN                = \"none\";\r\n\r\nexport class ShowDirective extends Directive {\r\n    static NodeHandlerConstructor = class extends NodeHandler {\r\n        init(...args) {\r\n            super.init(...args);\r\n            this._origDisplayStyle = this._node.style.display || \"\";\r\n        }\r\n        update(newValue) {\r\n            const eleStyleList = this._node.style;\r\n\r\n            if (newValue) {\r\n                eleStyleList.display = this._origDisplayStyle;\r\n            }\r\n            else if (eleStyleList.display !== HIDDEN)  {\r\n                eleStyleList.display = HIDDEN;\r\n            }\r\n        }\r\n    };\r\n\r\n    static has(ele) {\r\n        return hasAttribute(ele, DIRECTIVE) ? DIRECTIVE : \"\";\r\n    }\r\n\r\n    init(attr, attrValue) {\r\n        this._attr              = attr;\r\n        this._tokenValueGetter  = createValueGetter((attrValue || \"\"), \"show\");\r\n    }\r\n}\r\n\r\nexport default ShowDirective;","/**\r\n * Sets styles on an element\r\n *\r\n * @function domSetStyle\r\n *\r\n * @param {HTMLElement} el\r\n * @param {Object} styles\r\n *\r\n * @example\r\n *\r\n * domSetStyle(document.body, {\"background-color\", \"yellow\"});\r\n */\r\nexport function domSetStyle(el, styles){\r\n    if (!el || typeof styles !== \"object\"){\r\n        return;\r\n    }\r\n    Object.keys(styles).forEach(function(prop){\r\n        el.style[prop] = styles[prop];\r\n    });\r\n}\r\nexport default domSetStyle;\r\n","import {\r\n    createValueGetter,\r\n    hasAttribute    }   from \"../utils\"\r\nimport Directive        from \"./Directive\"\r\nimport {NodeHandler} from \"./NodeHandler.js\";\r\nimport {domSetStyle} from \"@purtuga/common/src/domutils/domSetStyle.js\"\r\n//============================================\r\nconst DIRECTIVE = \"_style\";\r\n\r\nexport class StyleDirective extends Directive {\r\n    static NodeHandlerConstructor = class extends NodeHandler {\r\n        update(newValue) {\r\n            domSetStyle(this._node, newValue);\r\n        }\r\n    };\r\n\r\n    static has(ele) {\r\n        return hasAttribute(ele, DIRECTIVE) ? DIRECTIVE : \"\";\r\n    }\r\n\r\n\r\n    init(attr, attrValue) {\r\n        this._attr              = attr;\r\n        this._tokenValueGetter  = createValueGetter((attrValue || \"\"), \"style\");\r\n    }\r\n}\r\n\r\nexport default StyleDirective;","import DomDataBind          from \"./DomDataBind.js\"\r\nimport render               from \"./render.js\"\r\nimport Directive            from \"./directives/Directive.js\"\r\nimport * as allDirectives   from \"./directives/index.js\";\r\n\r\nconst DomDataBindAll = DomDataBind.extend();\r\nDomDataBindAll.directives = allDirectives;\r\n\r\nexport * from \"./directives/index.js\"\r\nexport default DomDataBindAll;\r\nexport {\r\n    DomDataBindAll,\r\n    DomDataBind,\r\n    render,\r\n    allDirectives,\r\n    Directive\r\n};"],"sourceRoot":""}